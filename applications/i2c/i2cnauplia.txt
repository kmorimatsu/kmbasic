REM I2C test program for MachiKania Nauplia and Microchip MCP23017
REM This is a LED-blinking example.
REM GPA0 (pin #21) is connected to LED through 330 ohm resistor.
REM Pull-up rsistors (2.2 kohm) are connected to I2C lines.
REM PIC32MX150F128B (or 170F256B) pins #16 and #21 (RB7 and RB10) 
REM are connected to MCP23017 pins #13 and #12, respectively.

print "Initialize"

REM Initialize
gosub I2CINI

REM Initialize MCP23017 and set GPA0 for output

REM Start and send control byte for write
gosub I2CS
D=0x40:E=gosub(I2C8BD)
if E<0 then err else print "ACK ";hex$(E),
REM Send address: 0x00 for IODIRA
D=0x00:E=gosub(I2C8BD)
if E<0 then err else print "ACK ";hex$(E),
REM Send data for IODIRA for output at GPA0
D=0xFE:E=gosub(I2C8BD)
if E<0 then err else print "ACK ";hex$(E),
REM Stop
gosub I2CP

REM Set GPPUB to 0xff

REM Start and send control byte for write
gosub I2CS
D=0x40:E=gosub(I2C8BD)
if E<0 then err else print "ACK ";hex$(E),
REM Send address: 0x0D for GPPUB
D=0x0D:E=gosub(I2C8BD)
if E<0 then err else print "ACK ";hex$(E),
REM Send data for GPPUB for pull up all
D=0xFF:E=gosub(I2C8BD)
if E<0 then err else print "ACK ";hex$(E),
REM Stop
gosub I2CP

print "Start"

for i=1 to 10

  REM Set GPA0 to H

  REM Start and send control byte for write
  gosub I2CS
  D=0x40:E=gosub(I2C8BD)
  if E<0 then err else print "ACK ";hex$(E),
  REM Send address: 0x14 for OLATA
  D=0x14:E=gosub(I2C8BD)
  if E<0 then err else print "ACK ";hex$(E),
  REM Send data for OLATA for H at GPA0
  D=0x01:E=gosub(I2C8BD)
  if E<0 then err else print "ACK ";hex$(E),
  REM Stop
  gosub I2CP
  
  wait 30
  
  REM Set GPA0 to L
  
  REM Start and send control byte for write
  gosub I2CS
  D=0x40:E=gosub(I2C8BD)
  if E<0 then err else print "ACK ";hex$(E),
  REM Send address: 0x14 for OLATA
  D=0x14:E=gosub(I2C8BD)
  if E<0 then err else print "ACK ";hex$(E),
  REM Send data for OLATA for L at GPA0
  D=0x00:E=gosub(I2C8BD)
  if E<0 then err else print "ACK ";hex$(E),
  REM Stop
  gosub I2CP
  
  wait 30
  
  REM Read from GPB
  
  REM Start and send control byte for write
  gosub I2CS
  D=0x40:E=gosub(I2C8BD)
  if E<0 then err else print "ACK ";hex$(E),
  REM Send address: 0x13 for GPIOB
  D=0x13:E=gosub(I2C8BD)
  if E<0 then err else print "ACK ";hex$(E),
  REM Restart and send control byte for read
  gosub I2CS
  D=0x41:E=gosub(I2C8BD)
  if E<0 then err else print "ACK ";hex$(E),
  REM Read data from GPIOB with NAK
  E=gosub(I2C8RN)
  if E<0 then err else print "READ ";hex$(E)
  REM Stop
  gosub I2CP
  
  wait 30

next

REM All done. Reset peripherals.
gosub I2CEND

end

label err
print "NO ACK"
end

REM I2C routine for MachiKania Nauplia ver 0.5
REM Written by Katsumi
REM This code is in public domain.
REM 
REM Use RB7  (RB: 0x0080) for CLK line
REM Use RB10 (RB: 0x0400) for DAT line
REM Maximum (peak) speed for I2C communication is 100 kHz.
REM Note that actual speed is lower than this,
REM because NTSC video signal construction is needed by CPU.
REM 
REM Subroutines:
REM   I2CINI: Initialize I2C peripheral
REM   I2CEND: End using I2C
REM   I2CS  : Start signal
REM   I2CP  : Stop signal
REM   I2C8BD: Send 8 bit data in D and reveive in E (-1 if failed)
REM   I2C8RA: Read 8 bit in E and send ACK
REM   I2C8RN: Read 8 bit in E and send NAK
REM   All routines destroy B. I2C8BD, I2CRA, and I2C8RN also destroys E.
REM 
REM PIX32MX peripheral:
REM   TRISB   =0xBF886110
REM   TRISBCLR=0xBF886114 (TRISB+4*1)
REM   TRISBSET=0xBF886118 (TRISB+4*2)
REM   PORTB   =0xBF886120 (TRISB+4*4)
REM   LATBCLR =0xBF886134 (TRISB+4*9)

end

REM Assign PIC32 ports to I2C CLK and DAT
REM Use RB10 (RB: 0x0400) for CLK line
REM Use RB7  (RB: 0x0080) for DAT line
REM Modify following lines to change port #.
label I2CCLK
return 0x0400
label I2CDAT
return 0x0080

REM Initialize I2C
REM Both input for RB7 and RB10
REM LATB7 and LATB10 are both 0
REM Wait for 5.2 usec before return

label I2CINI
B=0xBF886110
B(2)=gosub(I2CCLK)+gosub(I2CDAT)
B(9)=gosub(I2CCLK)+gosub(I2CDAT)
exec 0x34020240,0x1440FFFF,0x2442FFFF
return

REM End using I2C
REM Both input for RB7 and RB10

label I2CEND
B=0xBF886110
B(2)=gosub(I2CCLK)+gosub(I2CDAT)
return

REM Start signal
label I2CS
B=0xBF886110
B(2)=gosub(I2CDAT)                    :REM SDA=H
exec 0x34020090,0x1440FFFF,0x2442FFFF :REM 2.6 usec
B(2)=gosub(I2CCLK)                    :REM SCL=H
exec 0x34020090,0x1440FFFF,0x2442FFFF :REM 2.6 usec
B(1)=gosub(I2CDAT)                    :REM SDA=L
exec 0x34020090,0x1440FFFF,0x2442FFFF :REM 2.6 usec
B(1)=gosub(I2CCLK)                    :REM SCL=L
exec 0x34020090,0x1440FFFF,0x2442FFFF :REM 2.6 usec
return

REM Stop signal
label I2CP
B(1)=gosub(I2CDAT)                    :REM SDA=L
exec 0x34020090,0x1440FFFF,0x2442FFFF :REM 2.6 usec
B(2)=gosub(I2CCLK)                    :REM SCL=H
exec 0x34020240,0x1440FFFF,0x2442FFFF :REM 5.2 usec
B(2)=gosub(I2CDAT)                    :REM SDA=H
exec 0x34020240,0x1440FFFF,0x2442FFFF :REM 5.2 usec
return

REM Send and receive 8 bit data
REM This returns -1 if ACK bit is H
REM Prepare D for sending 8 bit data.
REM Read data will be in E.
REM For reading 8 bits, let D=0x1ff (NAK) or D=0x2ff (ACK)

label I2C8BD
E=0
if D and 0x80 then E=E+gosub(I2CWHR)*0x80 else gosub I2CWL
if D and 0x40 then E=E+gosub(I2CWHR)*0x40 else gosub I2CWL
if D and 0x20 then E=E+gosub(I2CWHR)*0x20 else gosub I2CWL
if D and 0x10 then E=E+gosub(I2CWHR)*0x10 else gosub I2CWL
if D and 0x08 then E=E+gosub(I2CWHR)*0x08 else gosub I2CWL
if D and 0x04 then E=E+gosub(I2CWHR)*0x04 else gosub I2CWL
if D and 0x02 then E=E+gosub(I2CWHR)*0x02 else gosub I2CWL
if D and 0x01 then E=E+gosub(I2CWHR)*0x01 else gosub I2CWL
if D and 0x100 then gosub I2CWHR: return E
if D and 0x200 then gosub I2CWL:  return E
if gosub(I2CWHR) then E=-1
return E

REM Receive 8 bit data with ACK

label I2C8RA
D=0x2ff
goto I2C8BD

REM Receive 8 bit data with NAK

label I2C8RN
D=0x1ff
goto I2C8BD

REM 1 bit write/read routines, I2CWHR and I2CWL
REM To read, use I2CWHR.

label I2CWHR
B=0xBF886110
B(2)=gosub(I2CDAT)                      :REM SDA=H
exec 0x34020090,0x1440FFFF,0x2442FFFF   :REM 2.6 usec
B(2)=gosub(I2CCLK)                      :REM SCL=H
exec 0x34020240,0x1440FFFF,0x2442FFFF   :REM 5.2 usec
if B(4) and gosub(I2CDAT) then I2CWH2
  REM read SDA as L
  B(1)=gosub(I2CDAT)                    :REM SDA=L
  B(1)=gosub(I2CCLK)                    :REM SCL=L
  exec 0x34020090,0x1440FFFF,0x2442FFFF :REM 2.6 usec
  return 0
label I2CWH2
  REM read SDA as H
  B(1)=gosub(I2CCLK)                    :REM SCL=L
  exec 0x34020090,0x1440FFFF,0x2442FFFF :REM 2.6 usec
  return 1

label I2CWL
B=0xBF886110
B(1)=gosub(I2CDAT)                    :REM SDA=L
exec 0x34020090,0x1440FFFF,0x2442FFFF :REM 2.6 usec
B(2)=gosub(I2CCLK)                    :REM SCL=H
exec 0x34020240,0x1440FFFF,0x2442FFFF :REM 5.2 usec
B(1)=gosub(I2CCLK)                    :REM SCL=L
exec 0x34020090,0x1440FFFF,0x2442FFFF :REM 2.6 usec
return 0
